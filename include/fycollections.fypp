#:mute

#! Comparison types
#:set NO_COMPARISON = 0
#:set COMPARE_VALUE = 1
#:set COMPARE_ASSOCIATION = 2
#:set COMPARISONS = [NO_COMPARISON, COMPARE_VALUE, COMPARE_ASSOCIATION]

#! Assignment types
#:set ASSIGN_VALUE = 1
#:set ASSIGN_POINTER = 2
#:set ASSIGNMENTS = [ASSIGN_VALUE, ASSIGN_POINTER]


#! Defines a list  
#:def define_list_type(TYPE_NAME, ITEM_TYPE_IN, ITEM_TYPE_OUT, ITEM_ATTRIBS_IN='',&
    & ITEM_ATTRIBS_OUT='', ITEM_COMPARISON=COMPARE_VALUE, ITEM_ASSIGNMENT=ASSIGN_VALUE)

  #:mute

    #:assert ITEM_COMPARISON in COMPARISONS
    #:assert ITEM_ASSIGNMENT in ASSIGNMENTS

    #:if ITEM_ATTRIBS_OUT.strip()
       #:set ITEM_TYPE_OUT = ITEM_TYPE_OUT + ',' + ITEM_ATTRIBS_OUT
    #:endif

    #:if ITEM_ATTRIBS_IN.strip()
       #:set ITEM_TYPE_IN = ITEM_TYPE_IN + ',' + ITEM_ATTRIBS_IN
    #:endif

    #:set IS_ARRAY = 'dimension' in ITEM_ATTRIBS_IN.lower()
    #:set SET = ('=' if ITEM_ASSIGNMENT == ASSIGN_VALUE else '=>')

  #:endmute

  public :: ${TYPE_NAME}$, ${TYPE_NAME}$_init, size


  type :: ItemWrapper
    ${ITEM_TYPE_OUT}$ :: item
  end type ItemWrapper

  
  type :: ${TYPE_NAME}$
    private
    type(PtrList) :: backend
  contains
    procedure :: reset
    procedure :: append
    procedure :: insertItem
    procedure :: insertList
    generic :: insert => insertItem, insertList
    procedure :: get
    procedure :: set
    procedure :: delete
    procedure :: find
  end type ${TYPE_NAME}$

  interface size
    module procedure ${TYPE_NAME}$_size
  end interface size
  
contains

  subroutine ${TYPE_NAME}$_init(this)
    type(${TYPE_NAME}$), intent(out) :: this

    procedure(copyInterface), pointer :: pAssignTo
    procedure(destructInterface), pointer :: pDestruct
    procedure(isEqualInterface), pointer :: pIsEqual

    pAssignTo => copy
    pDestruct => destruct
  #:if ITEM_COMPARISON == NO_COMPARISON
    pIsEqual => null()
  #:else
    pIsEqual => isEqual
  #:endif
    call PtrList_init(this%backend, pAssignTo, pDestruct, pIsEqual)
    
  end subroutine ${TYPE_NAME}$_init


  subroutine reset(this, minSize)
    class(${TYPE_NAME}$), intent(inout) :: this
    integer, intent(in), optional :: minSize

    call this%backend%reset(minSize)

  end subroutine reset
    

  function ${TYPE_NAME}$_size(this) result(mySize)
    type(${TYPE_NAME}$), intent(in) :: this
    integer :: mySize

    mySize = this%backend%getSize()

  end function ${TYPE_NAME}$_size


  subroutine append(this, item)
    class(${TYPE_NAME}$), intent(inout) :: this
    ${ITEM_TYPE_IN}$, intent(in) :: item

    type(ItemWrapper), pointer :: wrapper

    allocate(wrapper)
    wrapper%item ${SET}$ item
    call this%backend%append(c_loc(wrapper))

  end subroutine append


  subroutine insertItem(this, ind, item)
    class(${TYPE_NAME}$), intent(inout) :: this
    integer, intent(in) :: ind
    ${ITEM_TYPE_IN}$, intent(in) :: item

    type(ItemWrapper), pointer :: wrapper

    allocate(wrapper)
    wrapper%item ${SET}$ item
    call this%backend%insertItem(ind, c_loc(wrapper))

  end subroutine insertItem


  subroutine insertList(this, ind, list)
    class(${TYPE_NAME}$), intent(inout) :: this
    integer, intent(in) :: ind
    type(${TYPE_NAME}$), intent(in) :: list

    call this%backend%insertList(ind, list%backend)

  end subroutine insertList


  function get(this, ind) result(item)
    class(${TYPE_NAME}$), intent(in) :: this
    integer, intent(in) :: ind
    ${ITEM_TYPE_OUT}$ :: item

    type(ItemWrapper), pointer :: wrapper

    call c_f_pointer(this%backend%get(ind), wrapper)
    item ${SET}$ wrapper%item

  end function get


  subroutine set(this, ind, item)
    class(${TYPE_NAME}$), intent(inout) :: this
    integer, intent(in) :: ind
    ${ITEM_TYPE_IN}$, intent(in) :: item

    type(ItemWrapper), pointer :: wrapper

    allocate(wrapper)
    wrapper%item ${SET}$ item
    call this%backend%set(ind, c_loc(wrapper))

  end subroutine set


  subroutine delete(this, ind, items)
    class(${TYPE_NAME}$), intent(inout) :: this
    integer, intent(in) :: ind
    integer, intent(in), optional :: items

    call this%backend%delete(ind, items)

  end subroutine delete


#:if ITEM_COMPARISON != NO_COMPARISON

  function find(this, item) result(ind)
    class(${TYPE_NAME}$), intent(in) :: this
    ${ITEM_TYPE_IN}$, intent(in), target :: item
    integer :: ind

    type(ItemWrapper), pointer :: wrapper

    allocate(wrapper)
    wrapper%item ${SET}$ item
    ind = this%backend%find(c_loc(wrapper))
    deallocate(wrapper)

  end function find

#:endif

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Private routines
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine copy(ptr1, ptr2)
    type(c_ptr), intent(in) :: ptr1
    type(c_ptr), intent(out) :: ptr2

    type(ItemWrapper), pointer :: wrapper1, wrapper2

    call c_f_pointer(ptr1, wrapper1)
    allocate(wrapper2)
    wrapper2%item ${SET}$ wrapper1%item
    ptr2 = c_loc(wrapper2)

  end subroutine copy


  subroutine destruct(ptr)
    type(c_ptr), intent(inout) :: ptr

    type(ItemWrapper), pointer :: wrapper

    call c_f_pointer(ptr, wrapper)
    deallocate(wrapper)
    ptr = C_NULL_PTR

  end subroutine destruct

  
  function isEqual(ptr1, ptr2)
    type(c_ptr), intent(in) :: ptr1, ptr2
    logical :: isEqual

    type(ItemWrapper), pointer :: wrapper1, wrapper2

    call c_f_pointer(ptr1, wrapper1)
    call c_f_pointer(ptr2, wrapper2)
    #:if ITEM_COMPARISON == COMPARE_ASSOCIATION
      isEqual = associated(wrapper1%item, wrapper2%item)
    #:elif IS_ARRAY
      isEqual = (size(wrapper1%item) == size(wrapper2%item))
      if (isEqual) then
        isEqual = all(wrapper1%item == wrapper2%item)
      end if
    #:else
      isEqual = (wrapper1%item == wrapper2%item)
    #:endif

  end function isEqual

#:enddef  


#:endmute
