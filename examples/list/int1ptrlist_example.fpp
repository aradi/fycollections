program int1ptrlist_example
  use type_int1ptrlist
  implicit none

  ! Here we use rank1 pointers as list element for demonstration purposes.
  ! Of course also lists of scalar pointers or pointers with any rank can be
  ! generated by using the appropriate template parameters.
  
  type(Int1PtrList), allocatable :: myList
  integer, allocatable, target :: array(:,:)
  integer, pointer :: ptr(:), orig(:)

  ! Dummy array, its rows serve as pointer targets
  allocate(array(10, 10))
  array(:,:) = -1

  ! Explicit allocation and deallocation to test finalization
  allocate(myList)
  call Int1PtrList_init(myList)
  print *, 'Creating list with targets [1, 2, 3]'
  orig => array(:,1)
  call myList%append(orig)
  orig => array(:,2)
  call myList%append(orig)
  orig => array(:,3)
  call myList%append(orig)
  print *, 'Size of the list:', size(myList)   ! Should yield 3
  ptr => myList%get(2)
  orig => array(:,2)
  print *, 'Is 2nd element associated with 2nd row?:', associated(ptr, orig)  ! True
  ptr => myList%get(2)
  orig => array(:,3)
  print *, 'Is 2nd element associated with 3rd row?:', associated(ptr, orig)  ! False
  orig => array(:,2)
  print *, 'Position of item with target 2:', myList%find(orig)  ! Should yield 2
  orig => array(:,5)
  print *, 'Position of item with target 5:', myList%find(orig)  ! Should yield 0

  print *, 'Inserting target 9 at position 2'
  orig => array(:,9)
  call myList%insert(2, orig)
  print *, 'List size:', size(myList)  ! 4
  print *, 'Elements 1:3 associated with targets 1 9 2?:'
  ptr => myList%get(1)
  orig => array(:,1)
  print *, associated(ptr, orig)
  ptr => myList%get(2)
  orig => array(:,9)
  print *, associated(ptr, orig)
  ptr => myList%get(3)
  orig => array(:,2)
  print *, associated(ptr, orig)
  deallocate(myList)

end program int1ptrlist_example
